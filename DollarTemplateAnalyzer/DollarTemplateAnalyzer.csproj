<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <TargetFramework>netstandard2.0</TargetFramework>
        <IsPackable>true</IsPackable>
        <Nullable>enable</Nullable>
        <LangVersion>latest</LangVersion>
        
        <DevelopmentDependency>true</DevelopmentDependency>

        <EnforceExtendedAnalyzerRules>true</EnforceExtendedAnalyzerRules>
        <IsRoslynComponent>true</IsRoslynComponent>

        <RootNamespace>DollarTemplateAnalyzer</RootNamespace>
        <AssemblyName>DollarTemplateAnalyzer</AssemblyName>
        <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
        <PackageId>rmp135.DollarTemplateAnalyzer</PackageId>
        <Title>Dollar Template Analyzer</Title>
        <Authors>Ryan Poole</Authors>
        <Description>Rosyln analyzer to detect dollar signs in template strings.</Description>
        <IncludeBuildOutput>false</IncludeBuildOutput>
        
        <PackageReadmeFile>README.md</PackageReadmeFile>
        <PackageLicenseFile>LICENSE.txt</PackageLicenseFile>
        <Version>1.0.0</Version>
        <RepositoryUrl>https://github.com/rmp135/DollarTemplateAnalyzer</RepositoryUrl>
        <RepositoryType>git</RepositoryType>
    </PropertyGroup>

    <ItemGroup>
        <PackageReference Include="Microsoft.CodeAnalysis.Analyzers" Version="3.3.4">
            <PrivateAssets>all</PrivateAssets>
            <IncludeAssets>runtime; build; native; contentfiles;  analyzers; buildtransitive</IncludeAssets>
        </PackageReference>
        <PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="4.6.0"/>
        <PackageReference Include="Microsoft.CodeAnalysis.CSharp.Workspaces" Version="4.6.0"/>
    </ItemGroup>
    
    <ItemGroup>
        <None Include="..\README.md" Pack="true" PackagePath="\" />
        <None Include="..\LICENSE.txt" Pack="true" PackagePath="\" />
    </ItemGroup>
    
    <!-- ðŸ‘‡ Add a new target that runs before the task that lists all the files to include in the NuGet package.
            This task must run after the packages resolution target -->
    <Target Name="AddNuGetDlls" BeforeTargets="_GetPackageFiles">
        <!-- Merge the collection of PackageReference and Assemblies using the NuGetPackageId key.
             This produces a new list containing the DLL path and the "IncludeInPackage" metadata-->
        <JoinItems Left="@(ResolvedCompileFileDefinitions)" LeftKey="NuGetPackageId" LeftMetadata="*"
                   Right="@(PackageReference)" RightKey="" RightMetadata="*"
                   ItemSpecToUse="Left">
            <Output TaskParameter="JoinResult" ItemName="_PackagesToPack" />
        </JoinItems>

        <ItemGroup>
            <!-- Remove NETStandard DLLs -->
            <_PackagesToPack Remove="@(_PackagesToPack)" Condition="%(NuGetPackageId) == 'NETStandard.Library'" />
            <_PackagesToPack Remove="@(_PackagesToPack)" Condition="%(_PackagesToPack.IncludeInPackage) != 'true'" />
        </ItemGroup>

        <Message Importance="High" Text="Adding DLLs from the following packages: @(_PackagesToPack->'%(NuGetPackageId)')" />

        <ItemGroup>
            <!-- Update the collection of items to pack with the DLLs from the NuGet packages -->
            <None Include="@(_PackagesToPack)"
                  Pack="true"
                  PackagePath="analyzers/dotnet/cs"
                  Visible="false" />

            <!-- Add the DLL produced by the current project to the NuGet package -->
            <None Include="$(OutputPath)\$(AssemblyName).dll"
                  Pack="true"
                  PackagePath="analyzers/dotnet/cs"
                  Visible="false" />
        </ItemGroup>
    </Target>


</Project>
